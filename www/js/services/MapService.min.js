angular.module("firstlife.services").service("MapService",["myConfig","leafletData","entityFactory","$log","$ionicLoading","$rootScope","$q","$cordovaGeolocation","rx",function(e,t,r,n,o,a,l,s,c){function p(){return y(),h(),x(),map}function g(e){if(self.map.mode==e)return!1;switch(self.map.mode=e,e){case"edit":v("edit");break;default:v("view")}return!0}function v(e){return self.map.layer==e?!1:(self.map.layer=e,t.getMap("mymap").then(function(r){t.getLayers().then(function(t){_.each(t.baselayers,function(e){r.removeLayer(e)}),r.addLayer(t.baselayers[e])})}),!0)}function y(){self.map={defaults:{maxZoom:config.map.max_zoom,minZoom:config.map.min_zoom,zoomControl:config.map.zoom&&m?!0:!1,zoomControlPosition:config.map.zoom_position,attributionControl:config.map.attribution},markers:[],center:{lat:config.map.map_default_lat,lng:config.map.map_default_lng,zoom:config.map.zoom_level},bounds:{},controls:{zoomControl:config.map.zoom&&m?!0:!1,zoomControlPosition:config.map.zoom_position,attributionControl:config.map.attribution},events:{},layers:{},editMode:!1,locate:config.actions.geolocation,search:config.actions.search,edit_action:config.actions.edit_mode,favourite_place:config.actions.favourite_place,category_filter:config.actions.category_filter,name:config.app_name}}function h(){self.map.layers={baselayers:{view:u.view,edit:u.edit},overlays:{pie:{id:1,name:"Categoria",type:"markercluster",visible:!0,layerOptions:{showCoverageOnHover:!1,spiderfyDistanceMultiplier:2,disableClusteringAtZoom:self.config.map.cluster_limit?self.config.map.cluster_limit:22,chunkedLoading:!0,iconCreateFunction:T,zoomToBoundsOnClick:!0}}},defaults:{crs:L.CRS.EPSG4326}}}function x(){var e=self.config.types.categories;return self.map.categories=e,self.map.mainCategories=e[0],self.map.css=self.config.design.css,e}function k(e){var i=l.defer();return e||(e=!1),t.getMap("mymap").then(function(t){var o=t.getBounds(),a=(new Date).getTime();self.filters||(self.filters={}),self.filters.time||(self.filters.time={from:self.config.map.time_from,to:self.config.map.time_to});for(var l=self.filters.time.from,s=self.filters.time.to,c={ne_lat:o.getNorthEast().lat,ne_lng:o.getNorthEast().lng,sw_lng:o.getSouthWest().lng,sw_lat:o.getSouthWest().lat,limit:600,hash:a,from:l?l.toISOString():null,to:s?s.toISOString():null},f=self.config.behaviour.split_factor,u=(c.ne_lat-c.sw_lat)/f,m=(c.ne_lng-c.sw_lng)/f,p=0,d=0;f>d;d++){for(var g=0;f>g;g++){var v={ne_lat:c.sw_lat+u*(d+1),ne_lng:c.sw_lng+m*(g+1),sw_lng:c.sw_lng+m*g,sw_lat:c.sw_lat+u*d,parent_bbox:c,i:d,j:g,from:c.from,to:c.to};(!self.config.behaviour.marker_cache||e)&&(self.map.markers=[]),r.getBBox(v,e).then(function(e){e&&b(e),i.resolve(e)},function(e){n.error("Failed to get all markers, result is ",e),i.reject(e)}),p++}p++}}),i.promise}function b(e){if(e)for(var t in e)w(e[t])}function w(e){var t=self.map.markers.map(function(e){return e.id}).indexOf(e.id);e&&0>t?self.map.markers.push(e):self.map.markers[t]=e}function T(e){var t=e.getAllChildMarkers(),r=5,n=e.getChildCount(),o=0,a="",l={};for(i in t){var s=t[i].options.icon.options.index;l[s]?l[s].count++:l[s]={index:t[i].options.icon.options.index,color:t[i].options.icon.options.color,count:1}}for(i in l){var c=Math.round(360*l[i].count/(r*n))*r;l[i].degree=c,a=a.concat(c>180?'<div class="pie big pie'+l[i].index+'" data-start="'+o+'" data-value="'+c+'"></div>':'<div class="pie pie'+l[i].index+'" data-start="'+o+'" data-value="'+c+'"></div>'),o+=c}return a=a.concat('<div class="inner"><span>'+n+"</span></div>"),new L.DivIcon({html:a,className:"pie-cluster",iconSize:new L.Point(40,40)})}self.config=e;var u={edit:{name:"edit",type:"xyz",url:config.map.tile_edit},view:{name:"view",type:"xyz",url:config.map.tile_view}};self.map={center:{lat:self.config.map.map_default_lat,lng:self.config.map.map_default_lng,zoom:self.config.map.zoom_level}},self.filters={},self.filters.time={from:self.config.map.time_from,to:self.config.map.time_to};var m=!0;return(ionic.Platform.isIPad()||ionic.Platform.isIOS()||ionic.Platform.isAndroid()||ionic.Platform.isWindowsPhone())&&(m=!1),{getMapBounds:function(){var e=l.defer();return t.getMap("mymap").then(function(t){e.resolve(t.getBounds())},function(t){n.error("MapService, getMapBounds, errore: ",t),e.reject(t)}),e.promise},searchFor:function(e,t){var i=[];b(r.getAllFromCache());self.map.markers.map(function(r){return r[t]==e?(i.push(r),r):null});return i},setTimeFilters:function(e){self.filters||(self.filters={}),self.filters.time=e},getTimeFilters:function(){return angular.equals({},self.filters)||angular.equals({},self.filters.time)?!1:self.filters.time},initMap:function(){return p()},getMap:function(){return self.map?self.map:p()},getBaseLayer:function(e){return u[e]},locate:function(e){return locate(e)},getCenter:function(){var e=l.defer();return t.getMap("mymap").then(function(t){var r=t.getCenter(),i=t.getZoom();e.resolve({lat:r.lat,lng:r.lng,zoom:i})},function(){e.reject()}),e.promise},getCenterFromMap:function(){return self.map.center},changeMode:function(e){return g(e)},updateMarkersDistributed:function(){return k()},resetMarkersDistributed:function(){return k(!0)},resetMarkers:function(){return self.map.markers=[],[]},get:function(e){var t=l.defer();return r.get(e,!1).then(function(e){w(e),t.resolve(e)},function(e){t.reject(e)}),t.promise},getDetails:function(e){var t=l.defer();return r.get(e,!0).then(function(e){t.resolve(e)},function(e){n.error("MapService, getDetails, error: ",e),t.reject(e)}),t.promise},getDetailsRx:function(e){return c.Observable.fromPromise(r.get(e,!0))},getAll:function(){var e=l.defer();return r.getAll().then(function(t){b(t),e.resolve(t)},function(t){e.reject(t)}),e.promise},removeMarker:function(e){var t=l.defer();return r.remove(e).then(function(r){var i=self.map.markers.map(function(e){return e.id}).indexOf(e);i>=0&&self.map.markers.splice(i,1),t.resolve(r)},function(e){n.error("MapService, deleteMarker, error: ",e),t.reject(e)}),t.promise},createMarker:function(e){var t=l.defer();return r.create(e).then(function(r){var i=self.map.markers.map(function(e){return e.id}).indexOf(e.id);i>=0?(self.map.markers[i]=r,t.resolve(r)):self.map.markers.push(r),t.resolve(r)},function(e){n.error("MapService, createMarker, error: ",e),t.reject(e)}),t.promise},updateMarker:function(e){var t=l.defer();return r.update(e).then(function(r){var i=self.map.markers.map(function(e){return e.id}).indexOf(e.id);i>=0?(self.map.markers[i]=r,t.resolve(r)):self.map.markers.push(r),t.resolve(r)},function(e){n.error("MapService, updateMarker, error: ",e),t.reject(e)}),t.promise}}}]).run(function(){self.filters={},self.filters.time={from:self.config.map.time_from,to:self.config.map.time_to}});