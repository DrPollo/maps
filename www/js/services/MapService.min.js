angular.module("firstlife.services").service("MapService",["myConfig","leafletData","entityFactory","$log","$ionicLoading","$rootScope","$q","$cordovaGeolocation","rx",function(e,t,r,o,n,a,s,l,f){function p(){return v(),h(),A(),map}function d(e){if(self.map.mode==e)return!1;switch(self.map.mode=e,e){case"edit":E("edit");break;default:E("view")}return!0}function E(e){return self.map.layer==e?!1:(self.map.layer=e,t.getMap("mymap").then(function(r){t.getLayers().then(function(t){_.each(t.baselayers,function(e){r.removeLayer(e)}),r.addLayer(t.baselayers[e])})}),!0)}function v(){self.map={defaults:{maxZoom:config.map.max_zoom,minZoom:config.map.min_zoom,zoomControl:config.map.zoom&&m?!0:!1,zoomControlPosition:config.map.zoom_position,attributionControl:config.map.attribution},markers:[],center:{lat:config.map.map_default_lat,lng:config.map.map_default_lng,zoom:config.map.zoom_level},bounds:{},controls:{zoomControl:config.map.zoom&&m?!0:!1,zoomControlPosition:config.map.zoom_position,attributionControl:config.map.attribution},events:{},layers:{},editMode:!1,locate:config.actions.geolocation,search:config.actions.search,edit_action:config.actions.edit_mode,favourite_place:config.actions.favourite_place,category_filter:config.actions.category_filter,name:config.app_name}}function h(){self.map.layers={baselayers:{view:u.view,edit:u.edit},overlays:{pie:{id:1,name:"Categoria",type:"markercluster",visible:!0,layerOptions:{showCoverageOnHover:!1,spiderfyDistanceMultiplier:2,disableClusteringAtZoom:self.config.map.cluster_limit?self.config.map.cluster_limit:22,chunkedLoading:!0,iconCreateFunction:M,zoomToBoundsOnClick:!0}}}}}function A(){var e=self.config.types.categories;return self.map.categories=e,self.map.mainCategories=e[0],self.map.css=self.config.design.css,e}function O(e){var i=s.defer();return e||(e=!1),t.getMap("mymap").then(function(t){var n=t.getBounds(),a=(new Date).getTime();self.filters||(self.filters={}),self.filters.time||(self.filters.time={from:self.config.map.time_from,to:self.config.map.time_to});for(var s=self.filters.time.from,l=self.filters.time.to,f={ne_lat:n.getNorthEast().lat,ne_lng:n.getNorthEast().lng,sw_lng:n.getSouthWest().lng,sw_lat:n.getSouthWest().lat,limit:600,hash:a,from:s?s.toISOString():null,to:l?l.toISOString():null},c=self.config.behaviour.split_factor,u=(f.ne_lat-f.sw_lat)/c,m=(f.ne_lng-f.sw_lng)/c,p=0,g=0;c>g;g++){for(var d=0;c>d;d++){var _={ne_lat:f.sw_lat+u*(g+1),ne_lng:f.sw_lng+m*(d+1),sw_lng:f.sw_lng+m*d,sw_lat:f.sw_lat+u*g,parent_bbox:f,i:g,j:d,from:f.from,to:f.to};(!self.config.behaviour.marker_cache||e)&&(self.map.markers=[]),r.getBBox(_,e).then(function(e){e&&T(e),i.resolve(e)},function(e){o.error("Failed to get all markers, result is ",e),i.reject(e)}),p++}p++}}),i.promise}function T(e){if(e)for(var t in e)C(e[t])}function C(e){var t=self.map.markers.map(function(e){return e.id}).indexOf(e.id);e&&0>t?self.map.markers.push(e):self.map.markers[t]=e}function M(e){var t=e.getAllChildMarkers(),r=5,o=e.getChildCount(),n=0,a="",s={};for(i in t){var l=t[i].options.icon.options.index;s[l]?s[l].count++:s[l]={index:t[i].options.icon.options.index,color:t[i].options.icon.options.color,count:1}}for(i in s){var f=Math.round(360*s[i].count/(r*o))*r;s[i].degree=f,a=a.concat(f>180?'<div class="pie big pie'+s[i].index+'" data-start="'+n+'" data-value="'+f+'"></div>':'<div class="pie pie'+s[i].index+'" data-start="'+n+'" data-value="'+f+'"></div>'),n+=f}return a=a.concat('<div class="inner"><span>'+o+"</span></div>"),new L.DivIcon({html:a,className:"pie-cluster",iconSize:new L.Point(40,40)})}self.config=e;var u={edit:{name:"edit",type:"xyz",url:config.map.tile_edit},view:{name:"view",type:"xyz",url:config.map.tile_view}};self.map={center:{lat:self.config.map.map_default_lat,lng:self.config.map.map_default_lng,zoom:self.config.map.zoom_level}},self.filters={},self.filters.time={from:self.config.map.time_from,to:self.config.map.time_to};var m=!0;return(ionic.Platform.isIPad()||ionic.Platform.isIOS()||ionic.Platform.isAndroid()||ionic.Platform.isWindowsPhone())&&(m=!1),{getMapBounds:function(){var e=s.defer();return t.getMap("mymap").then(function(t){e.resolve(t.getBounds())},function(t){o.error("MapService, getMapBounds, errore: ",t),e.reject(t)}),e.promise},searchFor:function(e,t){var i=[];T(r.getAllFromCache());self.map.markers.map(function(r){return r[t]==e?(i.push(r),r):null});return i},setTimeFilters:function(e){self.filters||(self.filters={}),self.filters.time=e},getTimeFilters:function(){return angular.equals({},self.filters)||angular.equals({},self.filters.time)?!1:self.filters.time},initMap:function(){return p()},getMap:function(){return self.map?self.map:p()},getBaseLayer:function(e){return u[e]},locate:function(e){return locate(e)},getCenter:function(){var e=s.defer();return t.getMap("mymap").then(function(t){var r=t.getCenter(),i=t.getZoom();e.resolve({lat:r.lat,lng:r.lng,zoom:i})},function(){e.reject()}),e.promise},getCenterFromMap:function(){return self.map.center},changeMode:function(e){return d(e)},updateMarkersDistributed:function(){return O()},resetMarkersDistributed:function(){return O(!0)},resetMarkers:function(){return self.map.markers=[],[]},get:function(e){var t=s.defer();return r.get(e,!1).then(function(e){C(e),t.resolve(e)},function(e){t.reject(e)}),t.promise},getDetails:function(e){var t=s.defer();return r.get(e,!0).then(function(e){t.resolve(e)},function(e){o.error("MapService, getDetails, error: ",e),t.reject(e)}),t.promise},getDetailsRx:function(e){return f.Observable.fromPromise(r.get(e,!0))},getAll:function(){var e=s.defer();return r.getAll().then(function(t){T(t),e.resolve(t)},function(t){e.reject(t)}),e.promise},removeMarker:function(e){var t=s.defer();return r.remove(e).then(function(r){var i=self.map.markers.map(function(e){return e.id}).indexOf(e);i>=0&&self.map.markers.splice(i,1),t.resolve(r)},function(e){o.error("MapService, deleteMarker, error: ",e),t.reject(e)}),t.promise},createMarker:function(e){var t=s.defer();return r.create(e).then(function(r){var i=self.map.markers.map(function(e){return e.id}).indexOf(e.id);i>=0?(self.map.markers[i]=r,t.resolve(r)):self.map.markers.push(r),t.resolve(r)},function(e){o.error("MapService, createMarker, error: ",e),t.reject(e)}),t.promise},updateMarker:function(e){var t=s.defer();return r.update(e).then(function(r){var i=self.map.markers.map(function(e){return e.id}).indexOf(e.id);i>=0?(self.map.markers[i]=r,t.resolve(r)):self.map.markers.push(r),t.resolve(r)},function(e){o.error("MapService, updateMarker, error: ",e),t.reject(e)}),t.promise}}}]).run(function(){self.filters={},self.filters.time={from:self.config.map.time_from,to:self.config.map.time_to}});